

#+PROPERTY: header-args :tangle "./generated-scripts/python-env.sh"

#+BEGIN_SRC bash
#!/bin/bash
#+END_SRC
* Introduction
I tend not to depend on the system installed python interepreters. I only really use python3 and miniconda3. This org file will go into detail on how to setup a python development environment. I currently use anaconda-mode in emacs, which at the moment, only requires setuptools.
* pyenv
** Dependencies
#+BEGIN_SRC bash
 sudo apt install -y build-essential libbz2-dev zlib1g-dev libssl-dev libreadline-dev libsqlite3-dev tk-dev libffi-dev
#+END_SRC
#+BEGIN_SRC bash
git clone https://github.com/pyenv/pyenv.git ~/.pyenv
#+END_SRC
* pyenv-virtualenv
#+BEGIN_SRC bash
git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv
#+END_SRC
* Python3 and Miniconda Installation
#+BEGIN_EXAMPLE
$ pyenv install 3.7.2
$ pyenv pyenv install miniconda3-4.3.30
#+END_EXAMPLE
* Setup Environments
** Python3 Ipython and Jupyter Global Environment
#+BEGIN_EXAMPLE
$ pyenv virtualenv 3.7.2 jupyter3   
$ pyenv activate jupyter3
$ pip install jupyter
$ python -m ipykernel install --user
$ pyenv deactivate
#+END_EXAMPLE
** Userland Utilities
Use virtual environments, whenever possible, do not pollute the global python package namespace. You can create a tools environment like so
#+BEGIN_EXAMPLE
$ pyenv virtualenv 3.7.2 tools3
#+END_EXAMPLE
* Set Python Global Environment(s)
For now I am just using my jupyter3 environment as my global.
#+BEGIN_EXAMPLE
pyenv global jupyter3 tools3
#+END_EXAMPLE
